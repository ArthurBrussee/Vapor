#pragma kernel FogDensity BLEND
#pragma kernel ZoneWrite

#pragma kernel LightDirectional
#pragma kernel LightDirectionalShadow SCATTER_SHADOW
#pragma kernel LightDirectionalShadowCascade SCATTER_SHADOW SHADOW_CASCADE

#pragma kernel LightPoint
#pragma kernel LightSpot
#pragma kernel LightSpotShadow SCATTER_SHADOW

#pragma kernel LightClear

#pragma kernel Scatter
#pragma kernel Integrate

#pragma kernel IntegrateClear

float4 _ZBufferParams;

float4 _WorldSpaceCameraPos;
float4 _ProjectionParams;
float4 unity_CameraWorldClipPlanes[6];

#include "../VaporFramework.cginc"

RWTexture3D<half4> _ScatterTexture;
Texture3D<half4> _ScatterTextureOld;

RWTexture3D<half4> _IntegratedTexture;
RWTexture3D<half4> _DensityTextureWrite;

RWTexture3D<half> _LightAccumR;
RWTexture3D<half> _LightAccumG;
RWTexture3D<half> _LightAccumB;

Texture3D<half> _LightReadR;
Texture3D<half> _LightReadG;
Texture3D<half> _LightReadB;

Texture3D<half4> _DensityTexture;
Texture3D<half4> _DensityTextureOld;

Texture2D _GradientTexture;
SamplerState sampler_GradientTexture;

float4 _GradientSettings;

float _ExponentialWeight;
float _ShadowSoft;
float _TemporalStrength;

//Main Light data
float4 _LightColor;
float4 _CameraPos;
float4 _LightPosRange;
Texture2D<float> _ShadowMapTexture;

//Spot light data
Texture2D _SpotCookie;
SamplerState sampler_SpotCookie;
Texture2D _SpotShadow;

//Shadow stuff
SamplerState MyLinearRepeatSampler;
SamplerState MyLinearClampSampler;

uint _Frame;
float _Time;
uint3 _LightWriteLower;


//HACK: Buffer with matrix & light splits extracted after screenspace mask
StructuredBuffer<float4> _LightSplits;
StructuredBuffer<float4x4> _MatrixBuf;

//Cascade clamp. 
float4 _ShadowRange;

float4x4 _SpotMatrix;
float4x4 _SpotShadowMatrix;

float _SettingBlend;
Texture2D _GradientTextureBlend;

//To world & reprojection
float4x4 _VAPOR_REPROJECT;

//Global fog properties
float4 _AlbedoExt;
float4 _Emissive;

//Atmoshpere settings
float4 _Rayleigh;
float4 _RayleighCross;

float4 _MieScatter;
float4 _Atmosphere;

float _LambertBeerDensity;

//Noise settings
float _NoisePower;
float4 _NoiseSpeed;
float4 _NoiseFrequency; 
float4 _NoiseWeights;
float4 _NoiseMin;
float4 _NoiseMax;
Texture2D _NoiseTex;
SamplerState sampler_NoiseTex;

float4x4 _ZoneWorldToLocal;
float4 _ZoneSize;
float _ZoneRadiusSqr;

Texture2D _BlueNoise;

#define PI 3.141592657f


float3 IDToUv(uint3 id, float zcenter) {
	return saturate(float3((id.x + 0.5f) / _VaporResolution.x, (id.y + 0.5f) / _VaporResolution.y, (id.z + zcenter) / _VaporResolution.z));
}

float3 IDToWorld(uint3 id, float centerZ) {
	float3 uv = IDToUv(id, centerZ);
	return VaporUvToWorld(uv);
}

float GetJitter(uint3 id) {
	uint2 pos = (id.xy) * _Frame;

	uint offset = (id.z + _Frame);
	pos += float2(offset, offset / 32) * 32;

	pos %= 512;

	float noise = _BlueNoise[pos].a;
	return (noise - 0.5f) * _TemporalStrength + 0.5f;
}

float GetShadow(float3 world, float z) {
	float4 wpos = float4(world, 1.0f);

#if SHADOW_CASCADE
	float4 coords;

	if (z < _MatrixBuf[4]._m10){
		coords = mul (_MatrixBuf[0], wpos);
	}else if (z < _MatrixBuf[4]._m11){
		coords = mul (_MatrixBuf[1], wpos);
	}else if (z < _MatrixBuf[4]._m12){
		coords = mul (_MatrixBuf[2], wpos);
	}else if (z < _MatrixBuf[4]._m13){
		coords = mul (_MatrixBuf[3], wpos);
	}
#else
	float4 coords = mul (_MatrixBuf[0], wpos);
#endif

	float depth = _ShadowMapTexture.SampleLevel(MyLinearClampSampler, coords.xy, 0.0f).r;
	
	if (depth >= saturate(coords.z - 0.02f) && depth > 0.0001f) {
		return 0.0f;
	} else {
		return 1.0f;
	}
}

//Atmospheric functions
float RayleighPhase(float cosTheta) {
	return 1.0f + cosTheta * cosTheta;
}

float MiePhase(float cosTheta, float g) {
	float gSqr = g * g;
	return min(10.0f, 0.5f * (1 - gSqr) / pow(abs(1 + gSqr - 2 * g * cosTheta), 1.5f));
}


float _AtmosphereRadiusSqr;

float AtmosphereIntersectLength(float3 dir){
	float3 pos = float3(0, _Atmosphere.w, 0);
	float dirDot = dot(dir, pos);

	//Pick positive d of sphere intersect
	float d = -dirDot + sqrt(dirDot * dirDot - dot(pos, pos) + _Atmosphere.z);
	return d;
}

float3 GetRayleighDir(float3 worldPos, float3 lightDir, float3 lightColor) {
	float3 camDifNorm = normalize(_CameraPos.xyz - worldPos);

	float cosTheta = dot(camDifNorm, lightDir);
	float3 rayleighLight = _Rayleigh.rgb * RayleighPhase(cosTheta);

	float lightDist = AtmosphereIntersectLength(-lightDir);
	//Fudge fudge, ring around the sun
	lightDist += pow(abs(cosTheta), _Atmosphere.x) * _Atmosphere.y;
	
	
	//Apply rayleigh & Mie scattering
	lightColor *= pow(saturate(_RayleighCross.rgb), lightDist);
	float m = MiePhase(cosTheta, _MieScatter.a);
	return (rayleighLight + m * _MieScatter.rgb) * lightColor;
}

float3 GetRayleigh(float3 worldPos, float3 lightDif, float3 lightColor) {
	float3 camDif = _CameraPos.xyz - worldPos;

	float lightDist = length(lightDif);
	float camDist = length(camDif);

	camDif /= camDist;
	lightDif /= lightDist;
	
	float cosTheta = dot(camDif, lightDif);
	float3 rayleighLight = _Rayleigh.rgb * RayleighPhase(cosTheta);

	return (rayleighLight + PI / 4) * lightColor;
}

float GetFaloff(float3 dd, float range) {
	float lightDistanceSqr = dot(dd, dd);
	float ratio2 = lightDistanceSqr * range;
	float num = saturate(1.0f - (ratio2 * ratio2));
	float faloff = (num * num) / (lightDistanceSqr + 1.0f);

	//TODO: Correct for approximate volume shadow miss
	faloff *= exp(-sqrt(lightDistanceSqr) * _LambertBeerDensity);

	return faloff;
}

[numthreads(4, 4, 4)]
void Scatter(uint3 id : SV_DispatchThreadID) {
	float jitter = GetJitter(id);
	float3 uv = IDToUv(id, jitter);
	
	float4 fogProps = _DensityTexture.SampleLevel(MyLinearClampSampler, uv, 0.0f);

	//TODO: Only read this if we know it's written somewhere?
	//TODO: Can we integrate main directional light here directly? Would save a pass
	//Combined would mean we can skip the entire LightRead pipeline

	float3 directLight = float3(
		_LightReadR.SampleLevel(MyLinearClampSampler, uv, 0.0f),
		_LightReadG.SampleLevel(MyLinearClampSampler, uv, 0.0f),
		_LightReadB.SampleLevel(MyLinearClampSampler, uv, 0.0f) 
	);
	
	//TODO: Emissive should come from texture...
	fogProps.rgb *= (directLight + _Emissive.rgb);

	float3 device = UvToVaporDevice(uv);
	
	//Reprojection
	float4 frustum = mul(_VAPOR_REPROJECT, float4(device, 1.0f));
	float3 oldUv = VaporDeviceToUv(frustum.xyz);
	float expWeight = any(oldUv - saturate(oldUv)) ? 1.0f : _ExponentialWeight;

	float4 oldVal = _ScatterTextureOld.SampleLevel(MyLinearClampSampler, oldUv, 0.0f);
	float4 write = expWeight * fogProps + (1.0f - expWeight) * oldVal;

	_ScatterTexture[id] = write;
}

//Integrate by stepping through volume
[numthreads(8, 8, 1)]
inline void Integrate(uint3 id : SV_DispatchThreadID) {
	uint3 writeId = uint3(id.xy, 0);

	float4 scatterExtWrite = float4(0.0f, 0.0f, 0.0f, 1.0f);
	for(writeId.z = 0; writeId.z < _VaporResolution.z; ++writeId.z){
		float4 scatterExt = _ScatterTextureOld[writeId];

		//Bit overkill but gets us proper linear dif more or less efficiently.
		float near = VaporDeviceToEyeDepth(UvToVaporDevice(IDToUv(writeId, 0.0f)).z);
		float far = VaporDeviceToEyeDepth(UvToVaporDevice(IDToUv(writeId, 1.0f)).z);
		
		float cellVolume = abs(far - near) * 0.01f;
		//float len = _VaporPlaneSettings.z / 100.0f;
		//cellVolume *= len;
		
		float expExtinction = exp(-scatterExt.a * cellVolume);
		half3 Sint = scatterExt.rgb * (1 - expExtinction) / (scatterExt.a + 0.00001f);
		
		scatterExtWrite.rgb += scatterExtWrite.a * Sint;
		scatterExtWrite.a *= expExtinction;

		_IntegratedTexture[writeId] = scatterExtWrite;
	}
}

[numthreads(4, 4, 4)]
inline void IntegrateClear(uint3 id : SV_DispatchThreadID) {
	_IntegratedTexture[id] = float4(0, 0, 0, 1);
}

void WriteLight(uint3 pos, float3 val) {
	_LightAccumR[pos] = val.r;
	_LightAccumG[pos] = val.g;
	_LightAccumB[pos] = val.b;
}

void WriteLightAdd(uint3 pos, float3 val) {
	_LightAccumR[pos] += val.r;
	_LightAccumG[pos] += val.g;
	_LightAccumB[pos] += val.b;
}

void LightDirectionalMain(uint3 id : SV_DispatchThreadID) {
	float3 uv = IDToUv(id, GetJitter(id));

	float3 device = UvToVaporDevice(uv);
	
	float zLocal = VaporDeviceToEyeDepth(device.z);
	float3 worldPos = VaporDeviceToWorld(device);

	float shadow = GetShadow(worldPos, zLocal);
	float3 scatter = GetRayleighDir(worldPos, _LightPosRange.xyz,  _LightColor.rgb);
	
	WriteLight(id, scatter * shadow);
}

[numthreads(4, 4, 4)]
void LightDirectional(uint3 id : SV_DispatchThreadID) {
	LightDirectionalMain(id);
}
[numthreads(4, 4, 4)]
void LightDirectionalShadow(uint3 id : SV_DispatchThreadID) {
	LightDirectionalMain(id);
}
[numthreads(4, 4, 4)]
void LightDirectionalShadowCascade(uint3 id : SV_DispatchThreadID) {
	LightDirectionalMain(id);
}

[numthreads(4, 4, 4)]
void LightClear(uint3 id : SV_DispatchThreadID){
	WriteLight(id, 0.0f);
}

void LightSpotMain(uint3 id : SV_DispatchThreadID) {
	id += _LightWriteLower;
	float3 worldPos = IDToWorld(id, 0.5f);
	float4 lightCoord = mul(_SpotMatrix, float4(worldPos, 1.0f));

	//TODO: In light pass this if should just dissapear naturally
	if (lightCoord.z > 0) {
		float3 direction = normalize(_CameraPos.xyz - worldPos);
		float3 dd = worldPos - _LightPosRange.xyz;
		float faloff = GetFaloff(dd, _LightPosRange.w);

		if (faloff > 0) {
#if SCATTER_SHADOW
			float4 shadowCoord = mul(_SpotShadowMatrix, float4(worldPos, 1.0f));
			shadowCoord.xyz /= shadowCoord.w;

			//From device coords to clip space. 
			//TODO: Apply in matrix?
			shadowCoord.xy = shadowCoord.xy * 0.5f + 0.5f;
			shadowCoord.y = 1.0f - shadowCoord.y;

			float depth = _SpotShadow.SampleLevel(MyLinearClampSampler, shadowCoord.xy, 0.0f).r;
			faloff *= saturate(depth * exp(-_ShadowSoft * saturate(shadowCoord.z)));
#endif

			float4 cookie = _SpotCookie.SampleLevel(sampler_SpotCookie, lightCoord.xy / lightCoord.w + 0.5f, 0.0f);
			float3 scatter = GetRayleigh(worldPos, dd, _LightColor.rgb * cookie.rgb * cookie.a);
			WriteLightAdd(id, faloff * scatter);
		}
	}
}

[numthreads(4, 4, 4)]
void LightSpot(uint3 id : SV_DispatchThreadID) {
	LightSpotMain(id);
}

[numthreads(4, 4, 4)]
void LightSpotShadow(uint3 id : SV_DispatchThreadID) {
	LightSpotMain(id);
}

[numthreads(4, 4, 4)]
void LightPoint(uint3 id : SV_DispatchThreadID) {
	id += _LightWriteLower;
	float3 worldPos = IDToWorld(id, 0.5f);


	float3 direction = normalize(_CameraPos.xyz - worldPos);
	float3 dd = worldPos - _LightPosRange.xyz;
	float faloff = GetFaloff(dd, _LightPosRange.w);

	if (faloff > 0) {
		float3 scatter = GetRayleigh(worldPos, dd, _LightColor.rgb);
		WriteLightAdd(id, faloff * scatter);
	}
}


float4 GetGradient(float3 worldPos, float zLocal) {
	float2 gradientUv = float2(zLocal * _GradientSettings.z + _GradientSettings.w, worldPos.y * _GradientSettings.x + _GradientSettings.y);
	float4 grad = _GradientTexture.SampleLevel(sampler_GradientTexture, gradientUv, 0);

#if defined(BLEND)
	grad = lerp(grad, _GradientTextureBlend.SampleLevel(sampler_GradientTexture, gradientUv, 0), _SettingBlend);
#endif

	return grad;
}

//Noise definitions
float Noise(float3 x) {
	float3 f = frac(x);
	float3 p = floor(x);
	f = f * f * (3.0f - 2.0f * f);
	float2 uv = (p.xz + float2(37.0f, 17.0f) * p.y) + f.xz;
	float2 rg = _NoiseTex.SampleLevel(sampler_NoiseTex, uv / 256.0f, 0.0f).xy * 2.0f - 1.0f;
	return lerp(rg.x, rg.y, f.y);
}

float FractNoise(float3 p) {
	float f = _NoiseWeights.x * Noise(p) +
		_NoiseWeights.y * Noise(1.5f * p) +
		_NoiseWeights.z * Noise(2.25f * p);

	return f;
}

[numthreads(4, 4, 4)]
void FogDensity(uint3 id : SV_DispatchThreadID){
	float3 uv = IDToUv(id, GetJitter(id));
	float3 device = UvToVaporDevice(uv);
	float zLocal = VaporDeviceToEyeDepth(device.z);
	float3 worldPos = VaporDeviceToWorld(device);

	//Gather albedo & Extinction
	float4 albedo = _AlbedoExt * GetGradient(worldPos, zLocal);

	float ns = tanh(FractNoise(worldPos * _NoiseFrequency.xyz + _Time * _NoiseSpeed.xyz) * _NoisePower) * 0.5f + 0.5f;
	albedo *= lerp(_NoiseMin, 1.0f, saturate(ns));

	//Write old and new value weighed.
	_DensityTextureWrite[id] = albedo;
}

[numthreads(4, 4, 4)]
void ZoneWrite(uint3 id : SV_DispatchThreadID) {
	id += _LightWriteLower;

	float3 uv = IDToUv(id, GetJitter(id));
	float3 device = UvToVaporDevice(uv);
	float3 worldPos = VaporDeviceToWorld(device);

	float3 local = mul(_ZoneWorldToLocal, float4(worldPos, 1.0f)).xyz;

	local.x -= clamp(local.x, -_ZoneSize.x, _ZoneSize.x);
	local.y -= clamp(local.y, -_ZoneSize.y, _ZoneSize.y);
	local.z -= clamp(local.z, -_ZoneSize.z, _ZoneSize.z);
	
	float dist = dot(local, local);
	float3 emis = _Emissive.rgb;

	if (dist <= _ZoneRadiusSqr) {
		float zLocal = VaporDeviceToEyeDepth(device.z);

		_DensityTextureWrite[id] = _AlbedoExt * GetGradient(worldPos, zLocal);
		_LightAccumR[id] += emis.r;
		_LightAccumG[id] += emis.g;
		_LightAccumB[id] += emis.b;
	}
}